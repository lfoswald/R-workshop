names(mydata)[3] <- "nconflict"
names(mydata)
## --------------------------------------------------------------------------------------------
summary(mydata)
## --------------------------------------------------------------------------------------------
nrow(mydata) # Number of rows
ncol(mydata) # Number of columns
dim(mydata) # Rows first then columns.
## --------------------------------------------------------------------------------------------
mydata[1, ]
## --------------------------------------------------------------------------------------------
mydata[c(1,2), ]
## --------------------------------------------------------------------------------------------
mydata[1:5,]
## --------------------------------------------------------------------------------------------
mydata[3,7]
# EX 10
##-------------------------------------------------------------------------------
mydata[1,1]
# EX 11
##-----------------------------------------------------------------------------
mydata[100,3]
## --------------------------------------------------------------------------------------------
mydata$nconflict
## --------------------------------------------------------------------------------------------
table(mydata$region)
## --------------------------------------------------------------------------------------------
summary(mydata$nconflict)
table(mydata$region, mydata$nconflict > mean(mydata$nconflict))
# EX 12
##-------------------------------------------------------------------------------
head(mydata[, 1])
head(mydata[, "country"])
# EX 13
##F-------------------------------------------------------------------------------
max(mydata$nconflict)
# EX 14
## -------------------------------------------------------------------------------
mydata$country[mydata$nconflict == max(mydata$nconflict)]
# EX 15
## -------------------------------------------------------------------------------
head(mydata$country[seq(1, length(mydata$country), 2)])
## --------------------------------------------------------------------------------------------
vec <- c(4, 1, 2, NA, 3)
mean(vec) #Result is NA!
sum(vec) #Result is NA!
## --------------------------------------------------------------------------------------------
mean(vec, na.rm = T)
sum(vec, na.rm = T)
## --------------------------------------------------------------------------------------------
obs <- c("Germany", "Europe", NA, NA, NA)
mydata_new <- rbind(mydata, obs)
dim(mydata_new)
## --------------------------------------------------------------------------------------------
mydata$nconflict_fatalities <- mydata$nconflict - mydata$nconflict_no_fatalities
head(mydata, 3) #prints out the first 3 rows of the data frame
## --------------------------------------------------------------------------------------------
mydata$av_fatalities <- mydata$fatalities/mydata$nconflict
## --------------------------------------------------------------------------------------------
mydata_na <- mydata[mydata$region == "Northern Africa",]
max(mydata_na$nconflict)
mydata_na$country[mydata_na$nconflict == max(mydata_na$nconflict)]
## EX6 -------------------------------------------------------------------------------
sum(pop)/length(pop)
## --------------------------------------------------------------------------------------------
pop1[1]
cname[1]
## --------------------------------------------------------------------------------------------
cname_copy <- cname
## Option 2 (for generalizability): Getting the last element and dropping it.
length(cname_copy)
## Option 1: Dropping the 5th element
cname_copy[-5]
## Option 2 (for generalizability): Getting the last element and dropping it.
length(cname_copy)
## R Primer 2
## -----------------------------------------------------------------------------------------------------
library(tidyverse)
## -----------------------------------------------------------------------------------------------------
tidyverse_packages()
## ## These next two lines of code do exactly the same thing.
##
mpg %>% filter(manufacturer=="audi") %>% group_by(model) %>% summarise(hwy_mean = mean(hwy))
summarise(group_by(filter(mpg, manufacturer=="audi"), model), hwy_mean = mean(hwy))
mpg %>%
filter(manufacturer=="audi") %>%
group_by(model) %>%
summarise(hwy_mean = mean(hwy))
# a word on arguments within a function
scale(penguins$body_mass_g, scale = T, center = F)
################################### DPLYR ############################################################
## ---- echo=FALSE--------------------------------------------------------------------------------------
library(palmerpenguins)
penguins <- penguins
## -----------------------------------------------------------------------------------------------------
glimpse(penguins)
names(penguins)
## ---- eval=F------------------------------------------------------------------------------------------
dplyr::select(penguins, species, island, year)
penguins %>%
select(-year)
## ---- eval=F------------------------------------------------------------------------------------------
dplyr::filter(penguins, year == 2007)
## ---- echo=FALSE, eval=F------------------------------------------------------------------------------
## # you just need to utilize & and type the logical operator for the species
dplyr::filter(penguins, year == 2007 & species == "Chinstrap")
dplyr::filter(penguins, year == 2007 , species == "Chinstrap")
dplyr::filter(penguins, year == 2007 | species == "Chinstrap")
## ---- echo=FALSE, eval=F------------------------------------------------------------------------------ penguins %>%
penguins %>%
dplyr::filter(year == 2009 & species == "Chinstrap") %>%
dplyr::select(species, sex, year)
## ---- eval=F------------------------------------------------------------------------------------------
names(penguins)
penguins_n <- penguins %>%
dplyr::mutate(body_mass_g = body_mass_g - 2 ,
body_mass_kg = body_mass_g/1000,
body_mass_scaled = scale(body_mass_g))
penguins_n$body_mass_2 <- (penguins_n$body_mass_g - mean(penguins_n$body_mass_g))/sd(penguins_n$body_mass_g)
attach(penguins_n)
body_mass_2 <- (body_mass_g - mean(body_mass_g))/sd(body_mass_g)
rm(penguins_n)
# useful stuff for missing values
penguins_n %>%
mutate(body_mass_g = replace_na(body_mass_g, 0))
penguins_n %>%
replace_na(0)
penguins_n %>%
na.omit()
penguins_n%>%
filter(!is.na(body_mass_g))
# the very careful way of adding new variables to a dataframe
body_mass_kg <- penguins$body_mass_g/1000
penguins$body_Mass_kg <- body_mass_kg
## -----------------------------------------------------------------------------------------------------
# compare this output with the one below
penguins %>%
dplyr::summarize(heaviest_penguin = max(body_mass_g, na.rm = T))
## -----------------------------------------------------------------------------------------------------
penguins <- penguins %>%
dplyr::group_by(species) %>%
mutate(max_weight_species = max(body_mass_g, na.rm = T))
dplyr::summarize(heaviest_penguin = max(body_mass_g, na.rm = T))
penguins %>%
dplyr::group_by(species, year) %>%
dplyr::summarize(lightest_penguin = min(body_mass_g, na.rm = T))
## ---- eval=F------------------------------------------------------------------------------------------
##
penguins %>%
dplyr::arrange(bill_length_mm)
## ---- eval=F------------------------------------------------------------------------------------------
##
penguins %>%
dplyr::arrange(desc(bill_length_mm))
## ---- echo = FALSE, eval=F----------------------------------------------------------------------------
penguins %>%
dplyr::filter(island == "Dream") %>%
dplyr::arrange(body_mass_g)
################################### TIDYR ############################################################
## ---- echo = F----------------------------------------------------------------------------------------
library(nycflights13)
flights
planes
## -----------------------------------------------------------------------------------------------------
left_join(flights, planes) %>%
select(year, month, day, dep_time, arr_time, carrier, flight, tailnum, type, model)%>%
head(3) ## Just to save vertical space in output
## -----------------------------------------------------------------------------------------------------
left_join(
flights,
planes %>% rename(year_built = year), ## Not necessary w/ below line, but helpful
by = "tailnum" ## Be specific about the joining column
) %>%
select(year, month, day, dep_time, arr_time, carrier, flight, tailnum, year_built, type, model) %>%
head(3)
left_join(main-data, secondary-data, by = "key-variable")
## ----join3--------------------------------------------------------------------------------------------
left_join(
flights,
planes, ## Not renaming "year" to "year_built" this time
by = "tailnum"
) %>%
select(contains("year"), month, day, dep_time, arr_time, carrier, flight, tailnum, type, model) %>%
head(3)
## -----------------------------------------------------------------------------------------------------
stocks = data.frame( ## Could use "tibble" instead of "data.frame" if you prefer
time = as.Date('2009-01-01') + 0:1,
X = rnorm(2, 0, 1),
Y = rnorm(2, 0, 2),
Z = rnorm(2, 0, 4)
)
stocks
stocks %>% pivot_longer(-time, names_to="stock", values_to="price")
## other example
panel = data.frame( ## Could use "tibble" instead of "data.frame" if you prefer
unit = c("A","B"),
var1 = rnorm(2, 0, 1),
var2 = rnorm(2, 0, 2),
var3 = rnorm(2, 0, 4)
)
panel
pivot_longer(panel, -unit , names_to="time", values_to="rating")
panel %>% pivot_longer(-unit, names_to="time", values_to="rating", names_prefix = "var")
## -----------------------------------------------------------------------------------------------------
## Write out the argument names this time: i.e. "names_to=" and "values_to="
tidy_stocks <- stocks %>%
pivot_longer(-time, names_to="stock", values_to="price")
tidy_panel <- panel %>% pivot_longer(-unit , names_to="time", values_to="rating", names_prefix = "var")
## ----pivot_wider1, dependson=tidy_stocks--------------------------------------------------------------
tidy_stocks %>% pivot_wider(names_from=stock, values_from=price)
tidy_stocks %>% pivot_wider(names_from=time, values_from=price)
tidy_panel %>% pivot_wider(names_from = time, values_from = rating)
tidy_panel %>% pivot_wider(names_from = unit, values_from = rating)
## ----sep1---------------------------------------------------------------------------------------------
economists = data.frame(name = c("Adam.Smith", "Paul.Samuelson", "Milton.Friedman"))
economists
economists %>% separate(name, c("first_name", "last_name"))
## ----sep2---------------------------------------------------------------------------------------------
jobs = data.frame(
name = c("Jack", "Jill"),
occupation = c("Homemaker", "Philosopher, Philanthropist, Troublemaker")
)
jobs
## Now split out Jill's various occupations into different rows
jobs %>% separate_rows(occupation)
## ----unite1-------------------------------------------------------------------------------------------
gdp = data.frame(
yr = rep(2016, times = 4),
mnth = rep(1, times = 4),
dy = 1:4,
gdp = rnorm(4, mean = 100, sd = 2)
)
gdp
## Combine "yr", "mnth", and "dy" into one "date" column
gdp %>% unite(date, c("yr", "mnth", "dy"), sep = "-")
## ----unite2-------------------------------------------------------------------------------------------
gdp_u = gdp %>% unite(date, c("yr", "mnth", "dy"), sep = "-")
gdp_u = gdp %>% unite(date, c("yr", "mnth", "dy"), sep = "-") %>% as_tibble()
gdp_u
## ----unite3, message=F--------------------------------------------------------------------------------
library(lubridate)
gdp_u %>% mutate(date = ymd(date))
################################### FUNCTIONS ############################################################
## ---- results=FALSE-----------------------------------------------------------------------------------
df <- data.frame(
a = rnorm(100, 5, 2),
b = rnorm(100, 100, 15),
c = rnorm(100, 2, 1),
d = rnorm(100, 36, 7)
)
df$a <- (df$a - mean(df$a, na.rm = TRUE)) / sd(df$a, na.rm = TRUE)
df$b <- (df$b - mean(df$b, na.rm = TRUE)) / sd(df$a, na.rm = TRUE) # spot the mistake?
df$c <- (df$c - mean(df$c, na.rm = TRUE)) / sd(df$c, na.rm = TRUE)
df$d <- (df$d - mean(df$d, na.rm = TRUE)) / sd(df$d, na.rm = TRUE)
## -----------------------------------------------------------------------------------------------------
zscale <- function(x){
(x - mean(x, na.rm = T) / sd(x, na.rm = T))
}
some_other_scale <- function(x,y){
(x - mean(x, na.rm = T) / sd(y, na.rm = T))
}
## -----------------------------------------------------------------------------------------------------
zscale <- function(x){
if (is.numeric(x)) {
(x - mean(x, na.rm = T) / sd(x, na.rm = T))
}
}
## ---- results=FALSE-----------------------------------------------------------------------------------
df$a <- zscale(df$a)
df$b <- zscale(df$b)
df$c <- zscale(df$c)
df$d <- zscale(df$d)
# you can also use your function with a pipe!
df$d %>% zscale()
################################### ITERATION ############################################################
## ---- results=FALSE-----------------------------------------------------------------------------------
# repetitive code
df$a <- zscale(df$a)
df$b <- zscale(df$b)
df$c <- zscale(df$c)
df$d <- zscale(df$d)
# equivalent iteration
for (i in seq_along(df)) {       # seq_along() similar to length()
df[[i]] <- zscale(df[[i]])     # [[]] because we are working on single elements
}
df
## ---- results=FALSE-----------------------------------------------------------------------------------
# repetitive code
mean(df$a)
mean(df$b)
mean(df$c)
mean(df$d)
# equivalent map function
map_dbl(df,mean)
lapply(df,mean)
# map function in tidyverse style
df %>% map_dbl(mean)
library(knitr)
knitr::purl(2-tidyverse.Rmd)
## R-Primer code + solutions
## BASICS
## --------------------------------------------------------------------------------------------
4*9
sqrt(144)
## --------------------------------------------------------------------------------------------
4 > 2
4 <= 2
## --------------------------------------------------------------------------------------------
result <- 5/3
result
## --------------------------------------------------------------------------------------------
my_vector <- c(1, 2, 3)
my_character_vector <- c("Welcome", "everyone")
length(my_vector)
str(my_character_vector)
## --------------------------------------------------------------------------------------------
my_matrix <- matrix(nrow=3, ncol=3)
dim(my_matrix)
## --------------------------------------------------------------------------------------------
my_list <- list(1, "a", TRUE)
my_list[2]
my_list[[2]]
## --------------------------------------------------------------------------------------------
my_df <- data.frame(id = letters[1:10], x = 1:10, y = 11:20)
## --------------------------------------------------------------------------------------------
# direct creation of factors
my_factor <- factor(c("single","single","married","married","single"))
# turning vectors into factors
my_vector <- c("single","single","married","married","single")
my_factor <- as.factor(my_vector)
levels(my_factor)
## VECTORS
## --------------------------------------------------------------------------------------------
pop1 <- c(1379, 1324, 323, 261, 208)
pop1
## --------------------------------------------------------------------------------------------
pop2 <- c(194, 187, 161, 142, 127)
pop <- c(pop1, pop2)
pop
## --------------------------------------------------------------------------------------------
str(pop)
## --------------------------------------------------------------------------------------------
cname <- c("CHN", "IND", "USA", "IDN", "BRA")
str(cname)
## --------------------------------------------------------------------------------------------
asia <- c(TRUE, TRUE, F, T, F)
str(asia)
## --------------------------------------------------------------------------------------------
regime <- c("Autocracy", "FlawedDem", "FullDem", "FlawedDem", "FlawedDem")
regime <- as.factor(regime)
str(regime)
## --------------------------------------------------------------------------------------------
regime <- as.character(regime)
str(regime)
asia <- as.character(asia)
str(asia)
asia <- as.logical(asia)
str(asia)
## EX1 --------------------------------------------------------------------------------------
#no_good <- (a,b,c)
#no_good_either <- c(one, two, three)
## EX2 ---- results="hide"-------------------------------------------------------------------------
diff <-c(TRUE,"TRUE")
class(diff)
## EX3 ---- results="hide"-------------------------------------------------------------------------
vec <- c("1", "2", "3")
## --------------------------------------------------------------------------------------------
pop1
pop1_double <- pop1 * 2
pop1_double
## EX4 ---- results="hide"-------------------------------------------------------------------------
pop1 + pop2
## EX5 ---- results="hide"-------------------------------------------------------------------------
pop_c <- c(pop1, pop2)
## --------------------------------------------------------------------------------------------
min(pop)
max(pop)
mean(pop)
## EX6 -------------------------------------------------------------------------------
sum(pop)/length(pop)
## --------------------------------------------------------------------------------------------
pop1[1]
cname[1]
## --------------------------------------------------------------------------------------------
pop[c(2,5)]
cname[c(2,5)]
## --------------------------------------------------------------------------------------------
first <- pop[1]
## --------------------------------------------------------------------------------------------
cname_copy <- cname
## Option 1: Dropping the 5th element
cname_copy[-5]
## Option 2 (for generalizability): Getting the last element and dropping it.
length(cname_copy)
cname_copy[-length(cname_copy)]
## --------------------------------------------------------------------------------------------
regime
regime[2] <- "FullDem"
regime
## EX7 ---------------------------------------------------------------
pop1_copy <- pop1 #Making a copy
pop1_copy[c(3,5)] <- -10 #Wrong!!
pop1_copy[c(3,5)] <- pop1_copy[c(3,5)] - 10
## --------------------------------------------------------------------------------------------
cindex <- seq(from = 1, to = length(pop1), by = 1)
cindex
## --------------------------------------------------------------------------------------------
seq(2, 10, 2)
## --------------------------------------------------------------------------------------------
rep(30, 5)
## --------------------------------------------------------------------------------------------
completed <- rep(c("yes","no"), 5)
completed
## --------------------------------------------------------------------------------------------
completed2 <- rep(c("yes","no"), each = 5)
completed2
## --------------------------------------------------------------------------------------------
names(pop1)
cname
names(pop1) <- cname
names(pop1)
pop1
## --------------------------------------------------------------------------------------------
pop1[names(pop1) == "BRA"]
# EX 8
## -------------------------------------------------------------------------------
mean(pop1)
pop1[pop1 >= mean(pop1)]
# EX 9
## -------------------------------------------------------------------------------
pop1[pop1 < max(pop1) & names(pop1) != "USA"]
## --------------------------------------------------------------------------------------------
cname == "IDN"
regime[cname == "IDN"]
## --------------------------------------------------------------------------------------------
which(cname == "IDN")
regime[which(cname == "IDN")]
## --------------------------------------------------------------------------------------------
pop1[asia == T & regime != "Autocracy"]
## ---- warning = F----------------------------------------------------------------------------
#install.packages("foreign") #alternatively use "Install" button
library(foreign)
## --------------------------------------------------------------------------------------------
mydata <- read.csv("data/ACLED_countries.csv",
stringsAsFactors = F)
## --------------------------------------------------------------------------------------------
str(mydata)
## --------------------------------------------------------------------------------------------
names(mydata)
## --------------------------------------------------------------------------------------------
names(mydata)[3] <- "nconflict"
names(mydata)
## --------------------------------------------------------------------------------------------
summary(mydata)
## --------------------------------------------------------------------------------------------
nrow(mydata) # Number of rows
ncol(mydata) # Number of columns
dim(mydata) # Rows first then columns.
## --------------------------------------------------------------------------------------------
mydata[1, ]
## --------------------------------------------------------------------------------------------
mydata[c(1,2), ]
## --------------------------------------------------------------------------------------------
mydata[1:5,]
## --------------------------------------------------------------------------------------------
mydata[3,7]
# EX 10
##-------------------------------------------------------------------------------
mydata[1,1]
# EX 11
##-----------------------------------------------------------------------------
mydata[100,3]
## --------------------------------------------------------------------------------------------
mydata$nconflict
## --------------------------------------------------------------------------------------------
table(mydata$region)
## --------------------------------------------------------------------------------------------
summary(mydata$nconflict)
table(mydata$region, mydata$nconflict > mean(mydata$nconflict))
# EX 12
##-------------------------------------------------------------------------------
head(mydata[, 1])
head(mydata[, "country"])
# EX 13
##F-------------------------------------------------------------------------------
max(mydata$nconflict)
# EX 14
## -------------------------------------------------------------------------------
mydata$country[mydata$nconflict == max(mydata$nconflict)]
# EX 15
## -------------------------------------------------------------------------------
head(mydata$country[seq(1, length(mydata$country), 2)])
## --------------------------------------------------------------------------------------------
vec <- c(4, 1, 2, NA, 3)
mean(vec) #Result is NA!
sum(vec) #Result is NA!
## --------------------------------------------------------------------------------------------
mean(vec, na.rm = T)
sum(vec, na.rm = T)
## --------------------------------------------------------------------------------------------
obs <- c("Germany", "Europe", NA, NA, NA)
mydata_new <- rbind(mydata, obs)
dim(mydata_new)
## --------------------------------------------------------------------------------------------
mydata$nconflict_fatalities <- mydata$nconflict - mydata$nconflict_no_fatalities
head(mydata, 3) #prints out the first 3 rows of the data frame
## --------------------------------------------------------------------------------------------
mydata$av_fatalities <- mydata$fatalities/mydata$nconflict
## --------------------------------------------------------------------------------------------
mydata_na <- mydata[mydata$region == "Northern Africa",]
max(mydata_na$nconflict)
mydata_na$country[mydata_na$nconflict == max(mydata_na$nconflict)]
